"""
@author: Cody Roberson
@date: 10/12/2022
@file: data_handler
@copyright: To Be Determined in the Interest of Collaboration
@description:
    DataHandler takes care of generating our hdf5 ovservation data file as well
    as handling any complex operations.

@Revisions:

@Dev Notes:
    10/12/2022
    Attributes need to be finalized for the hdf5 file format

"""
import multiprocessing

import numpy as np
from time import sleep
import h5py
import multiprocessing as mproc

class DataFile():
    """
    DataFile creates a formatted HDF5 data file and provides access to the
    relevant data structures needed for data taking. Data File will be utilized by the DataHandler Class
    """
    def __init__(self, filename: str, num_packets: int, num_tones: int):
        """
        Initialize the DataFile object. Captures given parameters in to instance variables
        and passes them to internal file template method

        :param filename: path and name of datafile '/your/data/folder/and/filename'
        :param num_packets: Number of packets to collect. Standard is ~488 packets/second
        :param num_tones: Number of tones generated by some paired RFSOC
        """
        self.filename = filename
        self.num_packets = num_packets
        self.num_tones = num_tones
        self.__create_hdf5_file(self.filename, self.num_tones, self.num_packets)

    def __create_hdf5_file(self, filename: str, num_packets: int, num_tones: int):
        """
        Create the skeleton observation data file. Any changes to the observation data format will begin
        here and need to propogate throughout the rest of the codebase.


        :param filename: full h5py datafile path
        :param num_packets: Number of packets to record.
        :param num_tones: Number of baseband tones
        """

        DETECTOR_DATA_LENGTH = 2052  # CONST

        self.data_file = h5py.File(filename, 'w')
        self.data_file.create_group("observation_data")

        self.obs_adc_i_data = data_file.create_dataset("observation_data/adc_i",
                                                       (DETECTOR_DATA_LENGTH / 2, num_packets),
                                                        dtype=h5py.h5t.NATIVE_UINT32, chunks=True)
        self.obs_adc_i_data.attrs.create("units", "volts")
        self.obs_adc_i_data.attrs.create("dimension_names", "bin_number, packet_number")

        self.obs_adc_q_data = data_file.create_dataset("observation_data/adc_q",
                                                       (DETECTOR_DATA_LENGTH / 2, num_packets),
                                                        dtype=h5py.h5t.NATIVE_UINT32, chunks=True)
        self.obs_adc_q_data.attrs.create("units", "volts")
        self.obs_adc_q_data.attrs.create("dimension_names", "bin_number, packet_number")

        self.obs_azimuth = data_file.create_dataset("observation_data/azimuth", (1, num_packets),
                                               dtype=h5py.h5t.NATIVE_DOUBLE)
        self.obs_azimuth.attrs.create("units", "degrees")
        self.obs_azimuth.attrs.create("dimension_names", "azimuth, packet_number")

        self.obs_elevation = data_file.create_dataset("observation_data/elevation", (1, num_packets),
                                                 dtype=h5py.h5t.NATIVE_DOUBLE)
        self.obs_elevation.attrs.create("units", "degrees")
        self.obs_elevation.attrs.create("dimension_names", "elevation, packet_number")


        self.obs_lofreq = data_file.create_dataset("observation_data/lofrequency", (1, num_packets),
                                              dtype=h5py.h5t.NATIVE_DOUBLE)

        self.obs_lofreq.attrs.create("units", "Hz")
        self.obs_lofreq.attrs.create("dimension_names", "lofrequency, packet_number")

        # Custom Timeframe Datatype
        timestamp_compound_datatype = [
            ("year", h5py.h5t.NATIVE_UINT32),
            ("month", h5py.h5t.NATIVE_UINT32),
            ("day", h5py.h5t.NATIVE_UINT32),
            ("seconds_midnight", h5py.h5t.NATIVE_UINT32),
            ("packet_number", h5py.h5t.NATIVE_UINT64),
        ]
        self.obs_timestamp = data_file.create_dataset("observation_data/timestamp", dtype=timestamp_compound_datatype,
                                                 shape=(num_packets, 1))

        self.data_file.create_group("other_variables")
        self.oth_atten = data_file.create_dataset("other_variables/attenuator_settings", dtype=h5py.h5t.NATIVE_DOUBLE,
                                             shape=(4, 1))
        self.oth_atten.attrs.create("units", "dB")

        self.oth_bbfreq = data_file.create_dataset("other_variables/baseband_freqs",
                                                   dtype=h5py.h5t.NATIVE_DOUBLE, shape=(num_tones, 1))
        self.oth_chanmask = data_file.create_dataset("other_variables/channel_mask",
                                                     dtype=h5py.h5t.NATIVE_INT32, shape=(num_tones, 1))
        self.oth_deltax = data_file.create_dataset("other_variables/detector_delta_x",
                                                   dtype=h5py.h5t.NATIVE_DOUBLE, shape=(num_tones, 1))
        self.oth_deltay = data_file.create_dataset("other_variables/detector_delta_y",
                                                   dtype=h5py.h5t.NATIVE_DOUBLE, shape=(num_tones, 1))
        self.oth_globaz = data_file.create_dataset("other_variables/global_delta_azimuth",
                                                   dtype=h5py.h5t.NATIVE_DOUBLE)
        self.oth_globel = data_file.create_dataset("other_variables/global_delta_elevation",
                                                   dtype=h5py.h5t.NATIVE_DOUBLE)
        self.oth_samplerate = data_file.create_dataset("other_variables/sample_rate",
                                                       dtype=h5py.h5t.NATIVE_DOUBLE)
        self.oth_timenum = data_file.create_dataset("other_variables/tile_number",
                                                    dtype=h5py.h5t.NATIVE_UINT32, shape=(num_tones, 1))
        self.oth_tonepw = data_file.create_dataset("other_variables/tone_power",
                                                   dtype=h5py.h5t.NATIVE_DOUBLE, shape=(num_tones, 1))
        self.oth_collectionType = data_file.create_dataset("other_variables/collection_type",
                                                           dtype=h5py.h5t.STRING)

    def _do_some_method(self):
        "protected instance method"
        pass

    def do_something_else(self):
        """
        Instance method
        :return:
        """
        pass


class DataHandler():
    def __init__(self):
        """
        what does this do???
        """
        pass

    def spawn_subprocess(self):
        # todo evaluate how this will function and interact with the larger process.
        """ manager = mproc.Manager()
            pool = manager.Pool(1)
            queue = manager.Queue()

            pool.apply_async(ldcHelper, (queue, fname, nPackets))
        """
        pass





def __process_data_handoff(queue: multiprocessing.queues.Queue , filename: str, nPackets: int):
    """
    This process should run independantly to any sort of data capture processes
    since disk io-ops are slow. The operation is as follows:

        while running in a seperate process,
            check for items being placed in the queue,
                if the queue contains object, begin copying data out of the queue and into
                the relevant hdf5 datasets.
    :param queue: Multiprocessing queue containing our data relayed from the depacketizer
    :param filename: (DEPRECATED)
    :param nPackets:
    :return:
    """
    dFile = h5py.File(filename, 'w')
    data = dFile.create_dataset("PACKETS", (2052, nPackets), dtype=h5py.h5t.NATIVE_INT32, chunks=True,
                                maxshape=(None, None))
    active = True
    while active:
        rawData = queue.get()
        if rawData is not None:
            d, c = rawData
            data[:, c] = d
        else:
            active = False
            dFile.flush()
    dFile.close()


def DoTestRoutine():
    pass


if __name__ == "__main__":
    DoTestRoutine()
